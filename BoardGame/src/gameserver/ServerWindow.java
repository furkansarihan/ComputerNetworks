/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameserver;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Furkan
 */
public class ServerWindow extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    ArrayList<Socket> list = new ArrayList<>();
    ObjectOutputStream oStream0, oStream1;
    ObjectInputStream iStream0, iStream1;
    String player1name;
    String player2name;
    ServerSocket socket;
    char carrige = 10;

    public ServerWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startserver = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startserver.setText("Start Server");
        startserver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startserverActionPerformed(evt);
            }
        });

        jLabel2.setText("CONSOLE");

        console.setColumns(20);
        console.setRows(5);
        jScrollPane2.setViewportView(console);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startserver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startserver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startserverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startserverActionPerformed
        try {
            socket = new ServerSocket(7187);
            getClients(); // Getting clients 
            gettingStreams(); // Getting streams..
            sendInfo(); // Sending player info to clients
            ThreadGame th1 = new ThreadGame(iStream0,oStream1);
            ThreadGame th2 = new ThreadGame(iStream1,oStream0);
            th1.start();th2.start(); // Threads start to listen each other ..
            addConsole("Server created. IP address : " + socket.getInetAddress());
            addConsole("Match started");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_startserverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        ServerWindow s = new ServerWindow();
        s.setVisible(true);
        /* Create and display the form */

    }
    void gettingStreams() throws IOException{
        oStream0 = new ObjectOutputStream(list.get(0).getOutputStream());
        oStream1 = new ObjectOutputStream(list.get(1).getOutputStream());
        oStream0.flush();oStream1.flush();
        iStream0 = new ObjectInputStream(list.get(0).getInputStream());
        iStream1 = new ObjectInputStream(list.get(1).getInputStream());
        System.out.println(iStream0.toString()+"");System.out.println(iStream1.toString()+"");
    }
    void sendInfo() throws IOException {
        
        System.out.println(oStream0.toString());System.out.println(oStream1.toString());
        oStream0.writeObject(1);
        oStream1.writeObject(2);
    }

    public void getClients() {
        boolean kontrol = true;
        while (kontrol) {
            try {
                Socket s = new Socket();
                s = socket.accept();
                list.add(s);
                addConsole("Client finded. IP address  --> ");
                if (list.size() == 2) {
                    kontrol = false;
                }
                //jLabel3.setText(list.size()+"");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton startserver;
    // End of variables declaration//GEN-END:variables

    public class ThreadGame implements Runnable { // First thread that 
        private Thread t;
        ObjectInputStream ois;
        ObjectOutputStream oos;
        
        public ThreadGame(ObjectInputStream is, ObjectOutputStream os){
            oos = os; ois =is;
        }
        public void run() {
            try {
                while(true){
                System.out.println("I am waiting for movemet");
                ArrayList<String> al = (ArrayList<String>) ois.readObject();
                oos.writeObject(al);
                //oos.flush();
                addConsole("Sending data to : "+oos);
                }
            } catch (Exception e) {
                try {
                    ois.close();
                    oos.close();
                    socket.close();
                    addConsole("--CONNECTION CLOSED--");
                    list = new ArrayList<Socket>();
                } catch (IOException ex) {
                    Logger.getLogger(ServerWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void start() {
            if (t == null) {
                t = new Thread(this, "");
                t.start();
            }
        }
    }
    void addConsole(String s){
        console.setText(s+carrige+console.getText());
    }
}
